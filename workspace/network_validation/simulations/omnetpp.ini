[General]
parallel-simulation = false
parsim-num-partitions = 4
simtime-resolution = ps

[Single_switch]
network = single_switch
sim-time-limit = 5s
*.*.hasCutthroughSwitching = false
#warmup-period = 0.5s #need later for ptp sync
#**.result-recording-modes = all
#**.displayGateSchedules = true
#**.gateFilter = "**.eth[2].**"#"**"#"**.eth[1].**"
#**.gateScheduleVisualizer.height = 16
#**.gateScheduleVisualizer.placementHint = "top"
#*.switch*.measurer.typename = "ResidenceTimeMeasurer"
**.fcsChecker.enabled=false
**.priority.eth[0].phyLayer.transmitter.timestamping=true
**.priority.eth[0].phyLayer.transmitter.ts_offset=56
**.priority.eth[0].phyLayer.transmitter.ts_packetFilter = "*priority*"

**.server.eth[0].phyLayer.receiver.timestamping=true
**.server.eth[0].phyLayer.receiver.ts_offset=64
**.server.eth[0].phyLayer.receiver.ts_packetFilter = "*priority*"
**.crcMode = "computed"
**.fcsMode = "computed"
*.server.numPcapRecorders = 1
*.server.pcapRecorder[*].packetFilter = "*priority*"
*.server.pcapRecorder[*].pcapFile = "results/server.pcap"
**.pcapRecorder[*].alwaysFlush = true


*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true

*.server.numApps = 1
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].display-name = "priority"
*.server.app[0].io.localPort = 1000

*.priority.numApps = 1
*.priority.app[0].typename = "UdpSourceApp"
*.priority.app[0].display-name = "priority"
*.priority.app[0].io.destAddress = "server"
*.priority.app[0].io.destPort = 1000
*.priority.app[0].source.productionInterval = 0.05ms 
*.priority.app[0].source.packetLength = int(uniform(64B,1460B))


*.priority.bridging.streamIdentifier.identifier.mapping = [{stream: "priority", packetFilter: expr(has(udp) && udp.destPort == 1000)}]
*.switch1.bridging.streamIdentifier.identifier.mapping = [{stream: "ptp", packetFilter: 'Gptp*' }]
# client stream encoding
*.priority.bridging.streamCoder.encoder.mapping = [{stream: "priority", pcp: 6}]

#*.*.bridging.streamCoder.encoder.mapping = [{stream: "ptp", pcp: 7}]
#*.*.bridging.streamCoder.decoder.mapping = [{pcp: 7,stream: "ptp"}]
#*.tsnClock.bridging.streamCoder.decoder.mapping = [{pcp: 7,stream: "ptp"}]
*.*.bridging.streamFilter.*.classifier.mapping = {ptp: 6}

*.priority.hasOutgoingStreams = true
*.server.hasIncommingStreams = true
*.server.hasOutgoingStreams = true #need to avoid packet type 31 errors
*.switch*.hasOutgoingStreams = true
*.switch*.hasIncommingStreams = true

*.*.hasTimeSynchronization = true
# TSN switch gPTP bridge master ports
**.referenceClock = "switch1.clock"
*.tsnClock.gptp.masterPorts = ["eth0"]
*.switch1.gptp.masterPorts = ["eth1", "eth2"]
*.switch.clock.oscillator.typename = "IdealOscillator"
*.priority.clock.oscillator.typename = "ConstantDriftOscillator"
*.priority.clock.oscillator.driftRate = 10ppm
*.server.clock.oscillator.typename = "ConstantDriftOscillator"
*.server.clock.oscillator.driftRate = 10ppm
*.switch*.gptp.syncInterval = 1ms
*.switch*.gptp.pdelayInterval = 1ms

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true

*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 4
*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
*.tsnClock.clock.displayStringTextFormat = "time: %T"
*.visualizer.infoVisualizer[1].modules = "*.switch1.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"
*.visualizer.infoVisualizer[2].modules = "*.priority.clock"
*.visualizer.infoVisualizer[2].placementHint = "bottom"
*.visualizer.infoVisualizer[3].modules = "*.server.clock"
*.visualizer.infoVisualizer[3].placementHint = "bottom"
*.priority.clock.displayStringTextFormat = "diff: %d"
*.server.clock.displayStringTextFormat = "diff: %d"
*.switch*.clock.displayStringTextFormat = "diff: %d"

# enable cut-through in all network nodes

#*.*.eth[*].typename = "LayeredEthernetInterface"
#*.*.eth[*].phyLayer.typename = "EthernetStreamingPhyLayer"

*.switch1.hasEgressTrafficShaping = true

# time-aware traffic shaping
*.switch1.eth[2].macLayer.queue.numTrafficClasses = 2
*.switch1.eth[2].macLayer.queue.queue[0].display-name = "background"
*.switch1.eth[2].macLayer.queue.queue[1].display-name = "priority"
*.switch1.eth[3].macLayer.queue.queue[2].display-name = "ptp"

#*.switch1.eth[2].macLayer.queue.transmissionGate[0].offset = 0us
#*.switch1.eth[2].macLayer.queue.transmissionGate[0].durations = [100us, 900us]
#*.switch1.eth[2].macLayer.queue.transmissionGate[1].offset = 100us
#*.switch1.eth[2].macLayer.queue.transmissionGate[1].durations = [900us, 100us]

[SingleSwitch_cutthrough]
extends = Single_switch
*.*.hasCutthroughSwitching = true

[Baseline]
network = validation_paper 
#

**.fcsChecker.enabled=false
**.priority.eth[0].phyLayer.transmitter.timestamping=true
**.priority.eth[0].phyLayer.transmitter.ts_offset=56
**.priority.eth[0].phyLayer.transmitter.ts_packetFilter = "*priority*"
**.background.eth[0].phyLayer.transmitter.timestamping=true
**.background.eth[0].phyLayer.transmitter.ts_offset=56
**.background.eth[0].phyLayer.transmitter.ts_packetFilter = "*background*"

**.server.eth[0].phyLayer.receiver.timestamping=true
**.server.eth[0].phyLayer.receiver.ts_offset=64
**.server.eth[0].phyLayer.receiver.ts_packetFilter = "*priority* or *background*"
**.crcMode = "computed"
**.fcsMode = "computed"
*.server.numPcapRecorders = 1
*.server.pcapRecorder[*].packetFilter = "*priority* or *background*"
*.server.pcapRecorder[*].pcapFile = "results/server.pcap"
**.pcapRecorder[*].alwaysFlush = true

**.displayGateSchedules = true
**.gateFilter = "**.eth[3].**"#"**"#"**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"
#
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true
#
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].display-name = "priority"
*.server.app[1].display-name = "background"
*.server.app[0].io.localPort = 1000
*.server.app[1].io.localPort = 1001
#
*.priority.numApps = 1
*.priority.app[0].typename = "UdpSourceApp"
*.priority.app[0].display-name = "priority"
*.priority.app[0].io.destAddress = "server"
*.priority.app[0].io.destPort = 1000
*.priority.app[0].source.packetLength = 150B
*.priority.app[0].source.productionInterval = 0.05ms 
##besteff
*.background.numApps = 1
*.background.app[0].typename = "UdpSourceApp"
*.background.app[0].display-name = "background"
*.background.app[0].io.destAddress = "server"
*.background.app[0].io.destPort = 1001
*.background.app[0].source.packetLength = 1500B - 50B
*.background.app[0].source.productionInterval = 0.1ms 
#
*.priority.bridging.streamIdentifier.identifier.mapping = [{stream: "priority", packetFilter: expr(has(udp) && udp.destPort == 1000)}]
*.background.bridging.streamIdentifier.identifier.mapping = [{stream: "background", packetFilter: expr(has(udp) && udp.destPort == 1001)}]
*.switch1.bridging.streamIdentifier.identifier.mapping = [{stream: "ptp", packetFilter: 'Gptp*' }]
## client stream encoding
*.priority.bridging.streamCoder.encoder.mapping = [{stream: "priority", pcp: 6}]
*.background.bridging.streamCoder.encoder.mapping = [{stream: "background", pcp: 0}]
#*.*.bridging.streamCoder.encoder.mapping = [{stream: "ptp", pcp: 7}]
#*.*.bridging.streamCoder.decoder.mapping = [{pcp: 7,stream: "ptp"}]
#*.tsnClock.bridging.streamCoder.decoder.mapping = [{pcp: 7,stream: "ptp"}]
#*.*.bridging.streamFilter.*.classifier.mapping = {ptp: 6}
#
*.priority.hasOutgoingStreams = true
*.background.hasOutgoingStreams = true
*.server.hasIncommingStreams = true
*.server.hasOutgoingStreams = true #need to avoid packet type 31 errors
*.switch*.hasOutgoingStreams = true
*.switch*.hasIncommingStreams = true
#
*.*.hasTimeSynchronization = true
## TSN switch gPTP bridge master ports
**.referenceClock = "switch1.clock"
*.tsnClock.gptp.masterPorts = ["eth0"]
*.switch1.gptp.masterPorts = ["eth1", "eth2","eth3"]
*.switch2.gptp.masterPorts = ["eth1"]
*.switch.clock.oscillator.typename = "IdealOscillator"
*.priority.clock.oscillator.typename = "ConstantDriftOscillator"
*.priority.clock.oscillator.driftRate = 10ppm
*.switch2.clock.oscillator.typename = "ConstantDriftOscillator"
*.switch2.clock.oscillator.driftRate = 10ppm
*.background.clock.oscillator.typename = "ConstantDriftOscillator"
*.background.clock.oscillator.driftRate = 10ppm
*.server.clock.oscillator.typename = "ConstantDriftOscillator"
*.server.clock.oscillator.driftRate = 10ppm
*.switch*.gptp.syncInterval = 1ms
*.switch*.gptp.pdelayInterval = 1ms
#
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true
#
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"
#
*.visualizer.numInfoVisualizers = 6
*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
*.tsnClock.clock.displayStringTextFormat = "time: %T"
*.visualizer.infoVisualizer[1].modules = "*.switch1.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"
*.visualizer.infoVisualizer[2].modules = "*.switch2.clock"
*.visualizer.infoVisualizer[2].placementHint = "bottom"
*.visualizer.infoVisualizer[3].modules = "*.priority.clock"
*.visualizer.infoVisualizer[3].placementHint = "bottom"
*.visualizer.infoVisualizer[4].modules = "*.background.clock"
*.visualizer.infoVisualizer[4].placementHint = "bottom"
*.visualizer.infoVisualizer[5].modules = "*.server.clock"
*.visualizer.infoVisualizer[5].placementHint = "bottom"
*.priority.clock.displayStringTextFormat = "diff: %d"
*.background.clock.displayStringTextFormat = "diff: %d"
*.server.clock.displayStringTextFormat = "diff: %d"
*.switch*.clock.displayStringTextFormat = "diff: %d"
#
[Baseline_Cutthrough]
extends = Baseline
## enable cut-through in all network nodes
*.*.hasCutthroughSwitching = true
##*.*.eth[*].typename = "LayeredEthernetInterface"
##*.*.eth[*].phyLayer.typename = "EthernetStreamingPhyLayer"

[Baseline_Shaping]
extends = Baseline
*.switch1.hasEgressTrafficShaping = true
#
## time-aware traffic shaping
*.switch1.eth[3].macLayer.queue.numTrafficClasses = 2
*.switch1.eth[3].macLayer.queue.queue[0].display-name = "background"
*.switch1.eth[3].macLayer.queue.queue[1].display-name = "priority"
##*.switch1.eth[3].macLayer.queue.queue[2].display-name = "ptp"
#
*.switch1.eth[3].macLayer.queue.transmissionGate[0].offset = 0us
*.switch1.eth[3].macLayer.queue.transmissionGate[0].durations = [100us, 900us]
*.switch1.eth[3].macLayer.queue.transmissionGate[1].offset = 100us
*.switch1.eth[3].macLayer.queue.transmissionGate[1].durations = [900us, 100us]

[Baseline_Shaping_cutthrough]
extends = Baseline_Shaping
*.*.hasCutthroughSwitching = true

[Paper1]
description = "Baseline: tactile, fibrolan"
network = fibrolan
**.vector-recording = false

###basic queuing
#**.macLayer.queue.typename="DropTailQueue"

###capture and timestamping
#needs patched inet
**.fcsChecker.enabled=false #need to insert timestamps and for ct
**.tactile.eth[0].phyLayer.transmitter.timestamping=true
**.tactile.eth[0].phyLayer.transmitter.ts_offset=56
**.tactile.eth[0].phyLayer.transmitter.ts_packetFilter = "*tactile*"

**.server.eth[0].phyLayer.receiver.timestamping=true
**.server.eth[0].phyLayer.receiver.ts_offset=64
**.server.eth[0].phyLayer.receiver.ts_packetFilter = "*tactile*"
**.crcMode = "computed" # need for pcap
**.fcsMode = "computed"
*.server.numPcapRecorders = 1
*.server.pcapRecorder[*].packetFilter = "*tactile*"
*.server.pcapRecorder[*].pcapFile = "results/NO_CT/omnet_robotic-NULL-NULL_P1_1518_0.0percent.pcap"
**.pcapRecorder[*].alwaysFlush = true

### transmission apps
*.server.numApps = 1
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].display-name = "tactile"
*.server.app[0].io.localPort = 1000

*.tactile.numApps = 1
*.tactile.app[0].typename = "UdpSourceApp"
*.tactile.app[0].display-name = "tactile"
*.tactile.app[0].io.destAddress = "server"
*.tactile.app[0].io.destPort = 1000
*.tactile.app[0].source.productionInterval = 1ms 
*.tactile.app[0].source.packetLength = 128B
#int(uniform(64B,1460B))

*.tactile.bridging.streamIdentifier.identifier.mapping = [{stream: "tactile", packetFilter: expr(has(udp) && udp.destPort == 1000)}]
*.tactile.bridging.streamCoder.encoder.mapping = [{stream: "tactile", pcp: 6}]

*.tactile.hasOutgoingStreams = true
*.server.hasIncommingStreams = true
*.server.hasOutgoingStreams = true #need to avoid packet type 31 errors
*.switch*.hasOutgoingStreams = true
*.switch*.hasIncommingStreams = true

*.*.hasTimeSynchronization = true
# TSN switch gPTP bridge master ports
**.referenceClock = "switch1_fibrolan.clock"
*.tsnClock.gptp.masterPorts = ["eth0"]
*.switch1*.gptp.masterPorts = ["eth1", "eth2"]
*.switch1*.clock.oscillator.typename = "IdealOscillator"
# Configure as same as the gPTP test
*.tactile.clock.typename = "SettableClock" 
*.server.clock.typename = "SettableClock" 
*.tactile.clock.oscillator.typename = "RandomDriftOscillator"
*.tactile.clock.oscillator.initialDriftRate = 0ppm
*.tactile.clock.oscillator.changeInterval = 5ms  # before is 2ms
*.tactile.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
*.tactile.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
*.tactile.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm
*.server.clock.oscillator.typename = "RandomDriftOscillator"
*.server.clock.oscillator.initialDriftRate = 0ppm
*.server.clock.oscillator.changeInterval = 5ms  # before is 2ms
*.server.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
*.server.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
*.server.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm


*.switch1*.gptp.syncInterval = 125ms # 8 sync message per second (same as the HW)
*.switch1*.gptp.pdelayInterval = 1s
# gPTP New Introduced parameters.
*.switch1*.gptp.clockResetThreshold = 10ns
*.switch1*.gptp.delta = 0.7 # related to the previous oscillator compensation
*.switch1*.gptp.gamma = 1.0 # realted to the nr-1

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true

*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 4
*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
*.tsnClock.clock.displayStringTextFormat = "time: %T"
*.visualizer.infoVisualizer[1].modules = "*.switch1_fibrolan.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"
*.visualizer.infoVisualizer[2].modules = "*.tactile.clock"
*.visualizer.infoVisualizer[2].placementHint = "bottom"
*.visualizer.infoVisualizer[3].modules = "*.server.clock"
*.visualizer.infoVisualizer[3].placementHint = "bottom"
*.tactile.clock.displayStringTextFormat = "diff: %d"
*.server.clock.displayStringTextFormat = "diff: %d"
*.switch*.clock.displayStringTextFormat = "diff: %d"


[Paper2]
description = "Baseline: tactile, kontron"
extends = Paper1
network = kontron
**.referenceClock = "switch1_kontron.clock"
*.server.pcapRecorder[*].pcapFile = "results/NO_CT/omnet_robotic-NULL-NULL_P2_1518_0.0percent.pcap"
*.visualizer.infoVisualizer[1].modules = "*.switch1_kontron.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"

[Paper3]
description = "Baseline: tactile, fibrolan+kontron"
extends = Paper1
network = fibrokontron
*.switch2*.gptp.masterPorts = ["eth1"]
*.switch2*.clock.oscillator.typename = "ConstantDriftOscillator"
*.switch2*.clock.oscillator.driftRate = 10ppm
*.visualizer.numInfoVisualizers = 5
*.visualizer.infoVisualizer[4].modules = "*.switch2_kontron.clock"
*.visualizer.infoVisualizer[4].placementHint = "bottom"
*.server.pcapRecorder[*].pcapFile = "results/NO_CT/omnet_robotic-NULL-NULL_P3_1518_0.0percent.pcap"


[Paper4]
description = "CTS: tactile, fibrolan, cutthrough"
extends = Paper1
*.*.hasCutthroughSwitching = true
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P4_1518_0.0percent.pcap"

[Paper5]
description = "CTS: tactile, kontron, cutthrough"
extends = Paper2
*.*.hasCutthroughSwitching = true
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P5_1518_0.0percent.pcap"

[Paper6]
description = "CTS: tactile, fibrolan+kontron, cutthrough"
extends = Paper3
*.*.hasCutthroughSwitching = true
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P6_1518_0.0percent.pcap"

[Paper7]
description = "noQoS: tactile+BE, fibrolan, cutthrough"
extends = Paper4
network = be_fibrolan
*.visualizer.numInfoVisualizers = 7
*.visualizer.infoVisualizer[5].modules = "*.besteffort1.clock"
*.visualizer.infoVisualizer[5].placementHint = "bottom"
*.visualizer.infoVisualizer[6].modules = "*.besteffort2.clock"
*.visualizer.infoVisualizer[6].placementHint = "bottom"
*.besteffort*.clock.displayStringTextFormat = "diff: %d"
#*.besteffort*.clock.oscillator.typename = "ConstantDriftOscillator"
#*.besteffort*.clock.oscillator.driftRate = 10ppm
### transmission apps
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"
*.server.app[1].display-name = "tactile"
*.server.app[1].io.localPort = 1001

*.besteffort*.numApps = 1
*.besteffort*.app[0].typename = "UdpSourceApp"
*.besteffort1.app[0].display-name = "besteffort1"
*.besteffort2.app[0].display-name = "besteffort2"
*.besteffort*.app[0].io.destAddress = "server"
*.besteffort*.app[0].io.destPort = 1001
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))
*.besteffort*.app[0].source.packetLength = 1460B

#*.besteffort*.app[*].tagger.typename = "PacketTagger"
#*.besteffort*.app[0].tagger.vlanId = 0
#*.tactile.app[*].tagger.typename = "PacketTagger"
#*.tactile.app[0].tagger.vlanId = 1

*.besteffort*.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(has(udp) && udp.destPort == 1001)}]
*.besteffort*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 1}]

*.besteffort*.hasOutgoingStreams = true
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P7_1518_0.0percent.pcap"

[Config P7_bg200]
extends=Paper7

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P7_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config P7_bg100]
extends=Paper7

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P7_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config P7_bg90]
extends=Paper7

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P7_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config P7_bg80]
extends=Paper7

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P7_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))

[Paper8]
description = "noQoS: tactile+BE, kontron, cutthrough"
extends = Paper7
network = be_kontron
**.referenceClock = "switch1_kontron.clock"
*.visualizer.infoVisualizer[1].modules = "*.switch1_kontron.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P8_1518_0.0percent.pcap"

[Config p8_bg200]
extends=Paper8

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P8_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config p8_bg100]
extends=Paper8

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P8_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config p8_bg90]
extends=Paper8

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P8_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config p8_bg80]
extends=Paper8

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P8_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))

[Paper9]
description = "noQoS: tactile+BE, fibrolan+kontron, cutthrough"
extends = Paper7
network = be_fibrokontron
#**.macLayer.queue.typename="None"
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P9_1518_0.0percent.pcap"
*.switch2*.gptp.masterPorts = ["eth1"]
*.switch2*.clock.oscillator.typename = "ConstantDriftOscillator"
*.switch2*.clock.oscillator.driftRate = 10ppm
*.visualizer.infoVisualizer[4].modules = "*.switch2_kontron.clock"
*.visualizer.infoVisualizer[4].placementHint = "bottom"


[Config p9_bg200]
extends=Paper9

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P9_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config p9_bg100]
extends=Paper9

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P9_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config p9_bg90]
extends=Paper9

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P9_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config p9_bg80]
extends=Paper9

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P9_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))

[Paper10]
description = "TAS: tactile+BE, fibrolan, cutthrough+TAS"
extends = Paper7
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P10_1518_0.0percent.pcap"
*.switch1*.hasEgressTrafficShaping = true
**.displayGateSchedules = true
**.gateFilter = "**.eth[3].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"
*.switch1*.eth[3].macLayer.queue.numTrafficClasses = 2
*.switch1*.eth[3].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[3].macLayer.queue.queue[1].display-name = "tactile"
*.switch1*.eth[3].macLayer.queue.transmissionGate[0].offset = 0us
*.switch1*.eth[3].macLayer.queue.transmissionGate[0].durations = [100us, 900us]
*.switch1*.eth[3].macLayer.queue.transmissionGate[1].offset = 100us
*.switch1*.eth[3].macLayer.queue.transmissionGate[1].durations = [900us, 100us]

[Config p10_bg200]
extends=Paper10

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P10_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config p10_bg100]
extends=Paper10

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P10_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config p10_bg90]
extends=Paper10

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P10_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config p10_bg80]
extends=Paper10

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P10_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))

[Paper11]
description = "TAS: tactile+BE, kontron, cutthrough+TAS"
extends = Paper8
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P11_1518_0.0percent.pcap"
*.switch1*.hasEgressTrafficShaping = true
**.displayGateSchedules = true
**.gateFilter = "**.eth[3].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"
*.switch1*.eth[3].macLayer.queue.numTrafficClasses = 2
*.switch1*.eth[3].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[3].macLayer.queue.queue[1].display-name = "tactile"
*.switch1*.eth[3].macLayer.queue.transmissionGate[0].offset = 0us
*.switch1*.eth[3].macLayer.queue.transmissionGate[0].durations = [100us, 900us]
*.switch1*.eth[3].macLayer.queue.transmissionGate[1].offset = 100us
*.switch1*.eth[3].macLayer.queue.transmissionGate[1].durations = [900us, 100us]


[Config p11_bg200]
extends=Paper11

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P11_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config p11_bg100]
extends=Paper11

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P11_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config p11_bg90]
extends=Paper11

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P11_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config p11_bg80]
extends=Paper11

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P11_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))

[Paper12]
description = "TAS: tactile+BE, fibrolan+kontron, cutthrough+TAS"
extends = Paper9
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P12_1518_0.0percent.pcap"
*.switch1*.hasEgressTrafficShaping = true
**.displayGateSchedules = true
**.gateFilter = "**.eth[3].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"
*.switch1*.eth[3].macLayer.queue.numTrafficClasses = 2
*.switch1*.eth[3].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[3].macLayer.queue.queue[1].display-name = "tactile"
*.switch1*.eth[3].macLayer.queue.transmissionGate[0].offset = 0us
*.switch1*.eth[3].macLayer.queue.transmissionGate[0].durations = [100us, 900us]
*.switch1*.eth[3].macLayer.queue.transmissionGate[1].offset = 100us
*.switch1*.eth[3].macLayer.queue.transmissionGate[1].durations = [900us, 100us]

[Config p12_bg200]
extends=Paper12

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P12_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config p12_bg100]
extends=Paper12

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P12_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config p12_bg90]
extends=Paper12

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P12_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config p12_bg80]
extends=Paper12

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P12_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))


[Paper13]
description = "FP: tactile+BE, fibrolan+kontron, cutthrough+FramePreemption"
extends = Paper9
*.server.pcapRecorder[*].pcapFile = "results/omnet_robotic-NULL-NULL_P13_1518_0.0percent.pcap"
*.*.ethernet.typename = "EthernetLayer"
*.switch1*.eth[4].typename = "LayeredEthernetInterface"
*.switch2*.eth[0].typename = "LayeredEthernetInterface"
#*.tactile.eth[0].macLayer.typename = "EthernetPreemptingMacLayer"
#*.tactile.eth[0].phyLayer.typename = "EthernetPreemptingPhyLayer"
*.switch1*.eth[4].macLayer.typename = "EthernetPreemptingMacLayer"
*.switch1*.eth[4].phyLayer.typename = "EthernetPreemptingPhyLayer"
*.switch2*.eth[0].macLayer.typename = "EthernetPreemptingMacLayer"
*.switch2*.eth[0].phyLayer.typename = "EthernetPreemptingPhyLayer"
**.macLayer.typename = "EthernetPreemptingMacLayer"
**.phyLayer.typename = "EthernetPreemptingPhyLayer"
*.switch1*.eth[4].macLayer.outboundClassifier.classifierClass="inet::PacketNameClassifier"
#*.switch1*.eth[4].macLayer.outboundClassifier
#*.switch*.hasFramePreemption=true
*.switch1*.eth[4].macLayer.queue.typename=""
*.switch2*.eth[0].macLayer.queue.typename=""
**.macLayer.queue.typename=""
**.macLayer.queue.typename=""


**.macLayer.*.queue.packetCapacity = 4
**.macLayer.*.queue.typename = "DropTailQueue"

[Config p13_bg200]
extends=Paper13

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P13_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config p13_bg100]
extends=Paper13

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P13_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config p13_bg90]
extends=Paper13

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P13_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config p13_bg80]
extends=Paper13

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P13_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))

[Paper14]
description = "TAS+FP: tactile+BE, fibrolan+kontron, cutthrough+TAS+FramePreemption"
extends = Paper12
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P14_1518_0.0percent.pcap"

[Config p14_bg200]
extends=Paper14

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P14_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us))

[Config p14_bg100]
extends=Paper14

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P14_1518_100.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.5))

[Config p14_bg90]
extends=Paper14

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P14_1518_90.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.45))

[Config p14_bg80]
extends=Paper14

*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_P14_1518_80.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(exponential(11.68us/0.4))

[Final_paper_for_Stefan]
sim-time-limit = 5s
description = "TAS: tactile+BE, fibrolan, TAS"
extends = Paper7
# cable length
*.*.*.channel.length = 0.5m
*.server.pcapRecorder[*].pcapFile = "results/CT/omnet_robotic-NULL-NULL_final_1518_0.0percent.pcap"
*.switch1*.hasEgressTrafficShaping = true
**.displayGateSchedules = true
**.gateFilter = "**.eth[4].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"
*.switch1*.eth[4].macLayer.queue.numTrafficClasses = 8
## set queueu limiet.
*.switch1*.eth[4].macLayer.queue.queue[*].packetCapacity = 4
*.switch1*.eth[4].macLayer.queue.queue[*].typename = "DropTailQueue"
#*.switch1*.eth[*].processingDelayLayer.ingress.ENABLE=false
######
# gptp config
######
*.switch1*.gptp.masterPorts = ["eth1", "eth2", "eth3", "eth4"]
#**.gptp.pdelayInitialOffset = 30us
#**.gptp.syncInitialOffset = 30us
#####
# add jitter for the TAS plot.
######
#*.switch1*.eth[4].processingDelayLayer.egress.jitter=10ns

# BE goes to Q0, tactile goes to Q6
# Update the new config (includes 15us GB)
*.switch1*.eth[4].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[4].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[1].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[5].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[2].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[6].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[3].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[7].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].durations = [485us, 515us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[4].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[4].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[5].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[5].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[2].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[2].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[6].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[6].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[3].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[3].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[7].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[7].durations = [500us, 500us]


[Config final_1518B_CT]
sim-time-limit = 6s
extends=Final_paper_for_Stefan
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_no-FP-TAS-CTS_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,138ns))
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT= true
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B
#### 
# switch1 has the default FibroLAN parameters so no need to configure. 
####
#*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
#*.switch1*.eth[4].processingDelayLayer.egress.jitter=170ns
#*.tactile.app[0].delayer.delay=int(normal(0ns,11000ns)) 
[Config final_1518B_no_CT]
sim-time-limit = 6s
extends=Final_paper_for_Stefan
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_no-FP-TAS-no-CTS_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))
*.*.hasCutthroughSwitching = false
*.switch1*.eth[*].processingDelayLayer.egress.CT = false
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1452B
*.switch1*.eth[4].processingDelayLayer.egress.delay = 2336.57ns   # FibroLAN beta_SF
#*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns
#*.tactile.app[0].delayer.delay=int(normal(0ns,11000ns))


[Config final_128B_CT]
sim-time-limit = 6s
extends=Final_paper_for_Stefan
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_no-FP-TAS-CTS_128_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,138ns))
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT= true
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 128B
#*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
#*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns
#*.tactile.app[0].delayer.delay=int(normal(0ns,11000ns))

[Config final_128_no_CT]
sim-time-limit = 6s
extends=Final_paper_for_Stefan
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_no-FP-TAS-no-CTS_128_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,138ns))
*.*.hasCutthroughSwitching = false
*.switch1*.eth[*].processingDelayLayer.egress.CT = false
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 128B
*.switch1*.eth[4].processingDelayLayer.egress.delay=2336.57ns # FibroLAN beta_SF
#*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns
#*.tactile.app[0].delayer.delay=int(normal(0ns,11000ns))

[General_combined]
description = "general combine"
network = be_fibrokontron
sim-time-limit = 5s
**.vector-recording = false
#----------capture and timestamping------------------
# needs patched inet
*.*.*.channel.length = 0.5m
#*.*.eth[*].bitrate = 1000Mbps
**.fcsChecker.enabled=false #need to insert timestamps and for ct
**.tactile.eth[0].phyLayer.transmitter.timestamping = true
**.tactile.eth[0].phyLayer.transmitter.ts_offset = 56 +0
**.tactile.eth[0].phyLayer.transmitter.ts_packetFilter = "*tactile*"

#**.switch1*.eth[1].phyLayer.receiver.timestamping = true
#**.switch1*.eth[1].phyLayer.receiver.ts_offset = 56 +8
#**.switch1*.eth[1].phyLayer.receiver.ts_packetFilter = "*tactile*"
#
#**.switch1*.eth[4].phyLayer.transmitter.timestamping = true
#**.switch1*.eth[4].phyLayer.transmitter.ts_offset = 56 +16
#**.switch1*.eth[4].phyLayer.transmitter.ts_packetFilter = "*tactile*"
##
#**.switch2*.eth[0].phyLayer.receiver.timestamping = true
#**.switch2*.eth[0].phyLayer.receiver.ts_offset = 56 +24
#**.switch2*.eth[0].phyLayer.receiver.ts_packetFilter = "*tactile*"
##
#**.switch2*.eth[1].phyLayer.transmitter.timestamping = true
#**.switch2*.eth[1].phyLayer.transmitter.ts_offset = 56 +32
#**.switch2*.eth[1].phyLayer.transmitter.ts_packetFilter = "*tactile*"
#
#**.server.eth[0].phyLayer.receiver.timestamping = true
#**.server.eth[0].phyLayer.receiver.ts_offset = 56 +40
#**.server.eth[0].phyLayer.receiver.ts_packetFilter = "*tactile*"

**.server.eth[0].phyLayer.receiver.timestamping = true
**.server.eth[0].phyLayer.receiver.ts_offset = 56 +8
**.server.eth[0].phyLayer.receiver.ts_packetFilter = "*tactile*"
**.crcMode = "computed" # need for pcap
**.fcsMode = "computed"
*.server.numPcapRecorders = 1
*.server.pcapRecorder[*].packetFilter = "*tactile*"
**.pcapRecorder[*].alwaysFlush = true
#----------End capture and timestamping------------------

#----------transmission apps------------------
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].display-name = "tactile"
*.server.app[0].io.localPort = 1000
*.server.app[1].display-name = "BE"
*.server.app[1].io.localPort = 1001

*.tactile.numApps = 1
*.tactile.app[0].typename = "UdpSourceApp"
*.tactile.app[0].display-name = "tactile"
*.tactile.app[0].io.destAddress = "server"
*.tactile.app[0].io.destPort = 1000
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B

*.besteffort*.numApps = 1
*.besteffort*.app[0].typename = "UdpSourceApp"
*.besteffort1.app[0].display-name = "besteffort1"
*.besteffort2.app[0].display-name = "besteffort2"
*.besteffort*.app[0].io.destAddress = "server"
*.besteffort*.app[0].io.destPort = 1001
*.besteffort*.app[0].source.packetLength = 1460B
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))

# stream configuration
*.tactile.bridging.streamIdentifier.identifier.mapping = [{stream: "tactile", packetFilter: expr(has(udp) && udp.destPort == 1000)}]
*.tactile.bridging.streamCoder.encoder.mapping = [{stream: "tactile", pcp: 6}]
*.besteffort*.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(has(udp) && udp.destPort == 1001)}]
*.besteffort*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 1}]
*.besteffort*.hasOutgoingStreams = true
*.tactile.hasOutgoingStreams = true
*.server.hasIncommingStreams = true
*.server.hasOutgoingStreams = true #need to avoid packet type 31 errors
*.switch*.hasOutgoingStreams = true
*.switch*.hasIncommingStreams = true
#----------End transmission apps------------------


#----------Time sync------------------
# Erro in multiple hups since INET did not implement correction field.
#*.*.hasTimeSynchronization = true
## TSN switch gPTP bridge master ports
*.*.hasTimeSynchronization = false   #if enable simulation will fail, interaction with CT
# TSN switch gPTP bridge master ports
#**.referenceClock = "switch1_fibrolan.clock"
#*.tsnClock.clock.oscillator.typename = "IdealOscillator"
*.tsnClock.gptp.masterPorts = ["eth0"]
#*.tsnClock.gptp.syncInterval = 1ms
#*.tsnClock.gptp.pdelayInterval = 1ms
#*.switch1*.gptp.masterPorts = ["eth1", "eth2", "eth3", "eth4"]
#*.switch1*.clock.oscillator.typename = "IdealOscillator"
#*.switch1*.gptp.syncInterval = 125ms
#*.switch1*.gptp.pdelayInterval = 1s
#*.tactile.clock.oscillator.typename = "RandomDriftOscillator"
##*.tactile.clock.oscillator.driftRate = 10ppm
#*.tactile.clock.oscillator.initialDriftRate = 0ppm
#*.tactile.clock.oscillator.changeInterval = 5ms  # before is 2ms
#*.tactile.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
#*.tactile.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
#*.tactile.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm
#
#*.server.clock.typename = "SettableClock"
#*.server.clock.oscillator.typename = "RandomDriftOscillator"
##*.server.clock.oscillator.driftRate = 10ppm
#*.server.clock.oscillator.initialDriftRate = 0ppm
#*.server.clock.oscillator.changeInterval = 5ms  # before is 2ms
#*.server.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
#*.server.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
#*.server.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm
#*.besteffort*.clock.oscillator.typename = "RandomDriftOscillator"
##*.besteffort*.clock.oscillator.driftRate = 10ppm
#*.besteffort*.clock.oscillator.initialDriftRate = 0ppm
#*.besteffort*.clock.oscillator.changeInterval = 5ms  # before is 2ms
#*.besteffort*.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
#*.besteffort*.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
#*.besteffort*.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm
#*.switch2*.clock.typename = "SettableClock"
#*.switch2*.gptp.masterPorts = ["eth1"]
#*.switch2*.clock.oscillator.typename = "RandomDriftOscillator"
##*.switch2*.clock.oscillator.driftRate = 10ppm
#*.switch2*.clock.oscillator.initialDriftRate = 0ppm
#*.switch2*.clock.oscillator.changeInterval = 5ms  # before is 2ms
#*.switch2*.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
#*.switch2*.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
#*.switch2*.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm
#*.switch2*.gptp.syncInterval = 125ms
#*.switch2*.gptp.pdelayInterval = 1s

# visualizer 
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"
###
*.tsnClock.clock.displayStringTextFormat = "time: %T"
*.besteffort*.clock.displayStringTextFormat = "diff: %d"
*.tactile.clock.displayStringTextFormat = "diff: %d"
*.server.clock.displayStringTextFormat = "diff: %d"
*.switch*.clock.displayStringTextFormat = "diff: %d"
###
*.visualizer.numInfoVisualizers = 7
*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
*.visualizer.infoVisualizer[1].modules = "*.switch1_fibrolan.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"
*.visualizer.infoVisualizer[2].modules = "*.tactile.clock"
*.visualizer.infoVisualizer[2].placementHint = "bottom"
*.visualizer.infoVisualizer[3].modules = "*.server.clock"
*.visualizer.infoVisualizer[3].placementHint = "bottom"
*.visualizer.infoVisualizer[4].modules = "*.switch2_kontron.clock"
*.visualizer.infoVisualizer[4].placementHint = "bottom"
*.visualizer.infoVisualizer[5].modules = "*.besteffort1.clock"
*.visualizer.infoVisualizer[5].placementHint = "bottom"
*.visualizer.infoVisualizer[6].modules = "*.besteffort2.clock"
*.visualizer.infoVisualizer[6].placementHint = "bottom"
## visualizer 
#*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
#*.visualizer.infoVisualizer.displayInfos = true
#*.visualizer.dataLinkVisualizer[0].displayLinks = true
#*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
#*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
#*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"
####
#*.tsnClock.clock.displayStringTextFormat = "time: %T"
#*.besteffort*.clock.displayStringTextFormat = "diff: %d"
#*.tactile.clock.displayStringTextFormat = "diff: %d"
#*.server.clock.displayStringTextFormat = "diff: %d"
#*.switch*.clock.displayStringTextFormat = "diff: %d"
####
#*.visualizer.numInfoVisualizers = 7
#*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
#*.visualizer.infoVisualizer[1].modules = "*.switch1_fibrolan.clock"
#*.visualizer.infoVisualizer[1].placementHint = "bottom"
#*.visualizer.infoVisualizer[2].modules = "*.tactile.clock"
#*.visualizer.infoVisualizer[2].placementHint = "bottom"
#*.visualizer.infoVisualizer[3].modules = "*.server.clock"
#*.visualizer.infoVisualizer[3].placementHint = "bottom"
#*.visualizer.infoVisualizer[4].modules = "*.switch2_kontron.clock"
#*.visualizer.infoVisualizer[4].placementHint = "bottom"
#*.visualizer.infoVisualizer[5].modules = "*.besteffort1.clock"
#*.visualizer.infoVisualizer[5].placementHint = "bottom"
#*.visualizer.infoVisualizer[6].modules = "*.besteffort2.clock"
#*.visualizer.infoVisualizer[6].placementHint = "bottom"

#----------End of Time sync------------------
#----------eth egress delay and jitter------------------
# Disable the additional delay
#*.switch1*.eth[4].processingDelayLayer.egress.delay=500ps
#*.switch1*.eth[4].processingDelayLayer.egress.jitter=10ns
#*.switch2*.eth[2].processingDelayLayer.egress.delay=500ps ### this should be interface 1 not 2
#*.switch2*.eth[2].processingDelayLayer.egress.jitter=10ns

[Config final_A_combined]
extends=General_combined
description = "noQoS, tactile+BE, fibrolan+kontron, no-cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-A_1518_200.0percent.pcap"
*.*.hasCutthroughSwitching = false

# stream decoding
# In config A, BE goes first. -> using two queue to force strcit priority
*.switch1*.hasEgressTrafficShaping = true
*.switch1*.eth[4].macLayer.queue.numTrafficClasses = 2
*.switch1*.eth[4].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[1].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[*].packetCapacity = 4
*.switch1*.eth[4].macLayer.queue.queue[*].typename = "DropTailQueue"
#*.switch1*.eth[*].processingDelayLayer.egress.CT = false
#*.switch2*.eth[*].processingDelayLayer.egress.CT = false
*.*switch1*.eth[4].processingDelayLayer.egress.delay = 2336.57ns # FibroLAN beta_SF
*.*switch2*.eth[1].processingDelayLayer.egress.delay = 2981.47ns # Kontron 1/3 beta_SF;  2249.07 # Kontron 5/6 beta_SF
#**.macLayer.queue.packetCapacity = 4
#**.macLayer.queue.typename = "DropTailQueue"

[Config final_B_combined]
extends = final_A_combined
description = "noQoS: tactile+BE, fibrolan+kontron, cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-B_1518_200.0percent.pcap"
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT = true
*.switch2*.eth[*].processingDelayLayer.egress.CT = true
# switch1 has the default FibroLAN parameters so no need to configure. 
*.switch2*.eth[1].processingDelayLayer.egress.interbuff_alpha =  8.79 # port 1/3 of Kontropn  #5.2 # port 5/6 of Kontron
*.switch2*.eth[1].processingDelayLayer.egress.interbuff_beta = 2907.58#port 1/3 of Kontropn #2405.02 # port 5/6 of Kontron
*.switch2*.eth[1].processingDelayLayer.egress.threshold_pktsize =  93#port 1/3 of Kontropn #113 # # port 5/6 of Kontron
#**.macLayer.queue.packetCapacity = 4
#**.macLayer.queue.typename = "DropTailQueue"

[Config final_C_combined]
extends=General_combined
description = "TAS: tactile+BE, fibrolan+kontron, cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-C_1518_200.0percent.pcap"
# CT
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT = true
*.switch2*.eth[*].processingDelayLayer.egress.CT = true
*.switch2*.eth[*].processingDelayLayer.egress.interbuff_alpha = 8.79# port 1/3 of Kontropn  #5.2 # port 5/6 of Kontron
*.switch2*.eth[*].processingDelayLayer.egress.interbuff_beta = 2907.58#port 1/3 of Kontropn #2405.02 # port 5/6 of Kontron
*.switch2*.eth[*].processingDelayLayer.egress.threshold_pktsize = 93#port 1/3 of Kontropn #113 # # port 5/6 of Kontron
# TAS
*.switch1*.hasEgressTrafficShaping = true
**.displayGateSchedules = true
**.gateFilter = "**.eth[4].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"
*.switch1*.eth[4].macLayer.queue.numTrafficClasses = 2
*.switch1*.eth[4].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[1].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[*].packetCapacity = 4
*.switch1*.eth[4].macLayer.queue.queue[*].typename = "DropTailQueue"
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].durations = [485us, 515us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].durations = [500us, 500us]
# GCL
# tactile: 500 open -> 485 close -> 15 close (GB)
# BE: 500 close -> 485 close -> 15 close (GB)


[Config final_D_combined]
#extends= final_A
extends = General_combined
description = "FP: tactile+BE, fibrolan+kontron, no-cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-D_1518_200.0percent.pcap"
#*.*.ethernet.typename = "EthernetLayer"
*.switch1*.eth[4].typename = "LayeredEthernetInterface"
*.switch2*.eth[0].typename = "LayeredEthernetInterface"
*.switch1*.eth[4].macLayer.typename = "EthernetPreemptingMacLayer"
*.switch1*.eth[4].phyLayer.typename = "EthernetPreemptingPhyLayer"
*.switch2*.eth[0].macLayer.typename = "EthernetPreemptingMacLayer"
*.switch2*.eth[0].phyLayer.typename = "EthernetPreemptingPhyLayer"
#**.macLayer.typename = "EthernetPreemptingMacLayer"
#**.phyLayer.typename = "EthernetPreemptingPhyLayer"

# classifier
*.switch1*.eth[4].macLayer.outboundClassifier.classifierClass="inet::PacketNameClassifier"
# disable maclayer queue
*.switch1*.eth[4].macLayer.queue.typename=""
*.switch2*.eth[0].macLayer.queue.typename=""
**.macLayer.*.queue.packetCapacity = 4
**.macLayer.*.queue.typename = "DropTailQueue"

## Enable switch 2 for Strict Priority (just for better result, A and B should also do...)
*.switch2*.hasEgressTrafficShaping = true
*.switch2*.eth[1].macLayer.queue.numTrafficClasses = 2
*.switch2*.eth[1].macLayer.queue.queue[0].display-name = "besteffort"
*.switch2*.eth[1].macLayer.queue.queue[1].display-name = "tactile"
*.switch2*.eth[1].macLayer.queue.queue[*].packetCapacity = 4
*.switch2*.eth[1].macLayer.queue.queue[*].typename = "DropTailQueue"

# Delay for SF switching mode
*.switch1*.eth[4].processingDelayLayer.egress.delay = 2336.57ns # FibroLAN beta_SF
*.switch2*.eth[1].processingDelayLayer.egress.delay = 2981.47ns # Kontron 1/3 beta_SF;  2249.07 # Kontron 5/6 beta_SF

[Config final_E_combined]
extends = final_D_combined
description = "FP: tactile+BE, fibrolan+kontron, cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-E_1518_200.0percent.pcap"
*.*.ethernet.typename = "EthernetLayer"
*.*.hasCutthroughSwitching = true
# adding the processing Delayer will casue the error of "Cannot convert between integer units -- in module (inet::EthernetFragmentFcsInserter)"
#*.switch1*.eth[*].processingDelayLayer.typename = ""
*.switch1*.eth[*].processingDelayLayer.egress.CT = true
*.switch2*.eth[*].processingDelayLayer.egress.CT = true

*.switch1*.eth[4].typename = "LayeredEthernetInterface"
*.switch2*.eth[0].typename = "LayeredEthernetInterface"
*.switch1*.eth[4].macLayer.typename = "EthernetPreemptingMacLayer"
#*.switch1*.eth[4].macLayer.expressMacLayer.typename="EthernetMacLayer"
#*.switch1*.eth[4].macLayer.preemptableMacLayer.typename="EthernetFragmentingThroughMacLayer"
*.switch1*.eth[4].phyLayer.typename = "EthernetPreemptingThroughPhyLayerStream"
*.switch2*.eth[0].macLayer.typename = "EthernetPreemptingMacLayer"
*.switch2*.eth[0].phyLayer.typename = "EthernetPreemptingThroughPhyLayerStream"
#*.switch2*.eth[0].macLayer.expressMacLayer.typename="EthernetMacLayer"
*.switch2*.eth[0].macLayer.preemptableMacLayer.typename="EthernetFragmentingThroughMacLayer"

# Delay for CT switch 2.
*.switch2*.eth[1].processingDelayLayer.egress.interbuff_alpha = 8.79# port 1/3 of Kontropn  #5.2 # port 5/6 of Kontron
*.switch2*.eth[1].processingDelayLayer.egress.interbuff_beta = 2907.58#port 1/3 of Kontropn #2405.02 # port 5/6 of Kontron
*.switch2*.eth[1].processingDelayLayer.egress.threshold_pktsize = 93#port 1/3 of Kontropn #113 # # port 5/6 of Kontron

# Disable delay for SF settings
*.switch1*.eth[4].processingDelayLayer.egress.delay = 0ns
*.switch2*.eth[1].processingDelayLayer.egress.delay = 0ns


[Config final_F_combined]
extends = final_E_combined
description = "FP: tactile+BE, fibrolan+kontron, TAS, cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-F_1518_200.0percent.pcap"
# TAS
*.switch1*.hasEgressTrafficShaping = true
**.displayGateSchedules = true
**.gateFilter = "**.eth[4].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

# enable sub-maclayer queue
*.switch1*.eth[4].macLayer.expressMacLayer.queue.typename = "GatingQueue"
*.switch1*.eth[4].macLayer.preemptableMacLayer.queue.typename = "GatingQueue"
*.switch1*.eth[4].macLayer.expressMacLayer.queue.gate.typename = "PeriodicGate"
*.switch1*.eth[4].macLayer.preemptableMacLayer.queue.gate.typename = "PeriodicGate"
*.switch1*.eth[4].macLayer.expressMacLayer.queue.gate.durations = [500us,500us]
*.switch1*.eth[4].macLayer.preemptableMacLayer.queue.gate.offset = 500us
*.switch1*.eth[4].macLayer.preemptableMacLayer.queue.gate.durations = [485us,515us]

*.switch1*.eth[4].macLayer.preemptableMacLayer.queue.queue.packetCapacity = 4
*.switch1*.eth[4].macLayer.preemptableMacLayer.queue.queue.typename = "DropTailQueue"


[Config final_A]
sim-time-limit = 5s
extends=Paper9
description = "noQoS: tactile+BE, fibrolan+kontron, no-cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-A_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))
*.*.hasCutthroughSwitching = false
*.switch1*.eth[*].processingDelayLayer.egress.CT = false
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns

[Config final_B]
sim-time-limit = 5s
extends=Paper9
description = "noQoS: tactile+BE, fibrolan+kontron, cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-B_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT = true
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns

[Config final_C]
sim-time-limit = 5s
extends=Paper12
description = "TAS: tactile+BE, fibrolan+kontron, cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-C_1518_200.0percent.pcap"
*.switch1*.hasEgressTrafficShaping = true
**.displayGateSchedules = true
**.gateFilter = "**.eth[4].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"
*.switch1*.eth[4].macLayer.queue.numTrafficClasses = 8
#*.switch1*.eth[*].processingDelayLayer.ingress.ENABLE=false
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=150ns
*.switch1*.eth[4].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[4].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[1].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[5].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[2].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[6].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[3].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[7].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[4].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[4].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[5].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[5].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[2].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[2].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[6].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[6].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[3].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[3].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[7].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[7].durations = [500us, 500us]
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT = true
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns

[Config final_D]
sim-time-limit = 5s
extends=Paper13
*.*.hasTimeSynchronization = false
description = "FP: tactile+BE, fibrolan+kontron, no-cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-D_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))
*.*.hasCutthroughSwitching = false
*.switch1*.eth[*].processingDelayLayer.egress.CT = false
*.switch2*.eth[*].processingDelayLayer.egress.CT = false
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns
*.switch2*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch2*.eth[4].processingDelayLayer.egress.jitter=50ns

[Config final_E]
sim-time-limit = 5s
extends=Paper13
*.*.hasTimeSynchronization = false
description = "FP: tactile+BE, fibrolan+kontron, no-cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-E_1518_200.0percent.pcap"
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT = true
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns

[Config final_F]
sim-time-limit = 5s
extends=Paper13
*.*.hasTimeSynchronization = false
description = "FP: tactile+BE, fibrolan+kontron, no-cutthrough"
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_robotic-NULL-NULL_final-F_1518_200.0percent.pcap"
*.switch1*.hasEgressTrafficShaping = true
*.switch1*.displayGateSchedules = true
*.switch1*.gateFilter = "**.eth[4].**"
*.switch1*.gateScheduleVisualizer.height = 16
*.switch1*.gateScheduleVisualizer.placementHint = "top"
*.switch1*.eth[4].macLayer.queue.numTrafficClasses = 8
#*.switch1*.eth[*].processingDelayLayer.ingress.ENABLE=false
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=150ns
*.switch1*.eth[4].macLayer.queue.queue[0].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[4].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[1].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[5].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[2].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[6].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.queue[3].display-name = "besteffort"
*.switch1*.eth[4].macLayer.queue.queue[7].display-name = "tactile"
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[0].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[4].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[4].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[1].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[5].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[5].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[2].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[2].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[6].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[6].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[3].offset = 500us
*.switch1*.eth[4].macLayer.queue.transmissionGate[3].durations = [500us, 500us]
*.switch1*.eth[4].macLayer.queue.transmissionGate[7].offset = 0us
*.switch1*.eth[4].macLayer.queue.transmissionGate[7].durations = [500us, 500us]
*.besteffort*.app[0].source.productionInterval = int(normal(11680ns,0ns))
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT = true
*.tactile.app[0].source.productionInterval = 1ms
*.tactile.app[0].source.productionJitter = int(truncnormal(1ns,11000ns))
*.tactile.app[0].source.packetLength = 1460B
*.switch1*.eth[4].processingDelayLayer.egress.delay=1ns
*.switch1*.eth[4].processingDelayLayer.egress.jitter=50ns

[Config ct-test-nct]
sim-time-limit = 5s
extends=Paper1
*.tactile.app[0].source.packetLength = int(uniform(64B,1460B))
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_CT-NULL-NULL_nct_64-1460_0.0percent.pcap"
*.*.hasCutthroughSwitching = false
*.switch1*.eth[*].processingDelayLayer.egress.CT = false
*.switch1*.eth[*].processingDelayLayer.egress.delay = 2336.57ns

[Config ct-test-ct]
sim-time-limit = 5s
extends=Paper1
*.tactile.app[0].source.packetLength = int(uniform(64B,1460B))
*.server.pcapRecorder[*].pcapFile = "results/final/omnet_CT-NULL-NULL_ct_64-1460_0.0percent.pcap"
*.*.hasCutthroughSwitching = true
*.switch1*.eth[*].processingDelayLayer.egress.CT = true

[Config gPTP-test]
description = "gPTP"
sim-time-limit = 500s
network = gptp_withclock
**.timeChanged*.vector-recording = true
**.timeDifference*.vector-recording = true
**.scalar-recording = false
**.vector-recording = false
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec 
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca 

####################################
# Time Synchronization Configuration
# enable time synchronization in all network nodes

#**.referenceClock = "switch.clock"
#*.*.hasGptp = true
#*.switch.hasTimeSynchronization = true
#*.tsnClock.hasTimeSynchronization = true
*.switch.hasGptp = true
*.tsnClock.hasGptp = true

#####
# ideal master clock
#####
*.tsnClock.clock.typename = "IdealClock"
*.tsnClock.clock.oscillator.typename = "IdealOscillator"
#*.tsnClock.clock.oscillator.typename = "RandomDriftOscillator"
#*.tsnClock.clock.oscillator.initialDriftRate = 0ppm
#*.tsnClock.clock.oscillator.changeInterval = 5ms  # before is 2ms
#*.tsnClock.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
#*.tsnClock.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
#*.tsnClock.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm


# TSN clock gPTP master ports
**.referenceClock = "tsnClock.clock"
*.tsnClock.gptp.gptpNodeType = "MASTER_NODE"
*.tsnClock.gptp.masterPorts = ["eth0"]
# TSN switch gPTP bridge master ports
*.switch.gptp.gptpNodeType = "SLAVE_NODE"
*.switch.gptp.slavePort = "eth2"

*.switch.gptp.pDelayInterval = 1s   # before is 1s
*.switch.gptp.pDelayInitialOffset = 0ms
*.switch.gptp.clockResetThreshold = 10ns
## Current figure in the papr: old eq.10 with delta=0.7, gamma=1
*.switch.gptp.delta = 0.7 # related to the previous oscillator compensation
*.switch.gptp.gamma = 1.0 # realted to the nr-1

#*.switch.gptp.synchronizationClockTimeError = uniform(-5ns, 5ns)
*.tsnClock.gptp.syncInterval = ${syncI=125ms,62.5ms,31.25ms,15.625ms,7.8125ms}

##### 
# Random drift oscillator: switch is the slave
#####
*.switch.clock.typename =  "SettableClock" 
#*.switch.clock.oscillator.typename = "ConstantDriftOscillator"
#*.switch.clock.oscillator.driftRate = 1ppm

*.switch.clock.oscillator.typename = "RandomDriftOscillator"
*.switch.clock.oscillator.initialDriftRate = 0ppm
*.switch.clock.oscillator.changeInterval = 5ms  # before is 2ms
*.switch.clock.oscillator.driftRateChange = uniform(-0.05ppm,0.05ppm)
*.switch.clock.oscillator.driftRateChangeLowerLimit = -0.1ppm
*.switch.clock.oscillator.driftRateChangeUpperLimit = 0.1ppm
#*.switch.clock.oscillator.driftRateChange = uniform(-10ppm,10ppm)
#*.switch.clock.oscillator.driftRateChangeLowerLimit = -100ppm
#*.switch.clock.oscillator.driftRateChangeUpperLimit = 100ppm


# data link visualizer displays gPTP time synchronization packets
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true

*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 2
*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
*.tsnClock.clock.displayStringTextFormat = "time: %T"
*.visualizer.infoVisualizer[1].modules = "*.switch.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"
*.switch.clock.displayStringTextFormat = "diff: %d"


