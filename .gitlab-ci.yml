# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
image: ubuntu:jammy


before_script:
  - apt-get update
  - DEBIAN_FRONTEND=noninteractive apt-get install -y wget tar xdg-utils lshw tshark build-essential make cmake clang lld gdb bison flex perl python3 git python3-pip libxml2-dev zlib1g-dev doxygen mpi-default-dev
  - python3 -m pip install --user --upgrade numpy pandas==1.4.4 matplotlib scipy seaborn posix_ipc
  - pip3 install -r plot/Requirements.txt
  - cat /proc/cpuinfo
  - lshw
  - mkdir /usr/share/desktop-directories/

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_UPDATE_FLAGS: --jobs 4

stages:          # List of stages for jobs, and their order of execution
  - build   #just one stage possible because i can't store omnet and inet between stages... sizelimit....'


run_build:       # This job runs in the build stage, which runs first.
  stage: build
  interruptible: true
  timeout: 1 day
  script:
    - ./build.sh
    - echo "Running simulations"
    - ./run_simulations.sh
    - echo "plotting results"
    - ./run_plot.sh
    - echo "check for fail"
    - ./run_check.sh
#  after_script:
#    - tar cfz results.tar.gz workspace/network_validation/simulations/results plot/*.png plot/*.csv plot/*.txt plot/*.csv plot/*.txt
  artifacts:
      when: always
      paths:
         - workspace/network_validation/simulations/results
         - plot/*.png
         - plot/*.csv
         - plot/*.txt
         - plot/*.csv

      expire_in: 2 week
      name: network-test_${CI_JOB_ID}

